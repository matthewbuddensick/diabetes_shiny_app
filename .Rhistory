filter(row(id_mapping) >= 1 & row(id_mapping) <= 8) %>%
mutate(admission_type_id = as.numeric(admission_type_id)) %>%
rename(admission_type = description)
## discharge_disposition_id,description
discharge_disposition_data <- id_mapping %>%
filter(row(id_mapping) >= 11 & row(id_mapping) <= 40) %>%
rename(discharge_disposition_id = admission_type_id) %>%
mutate(discharge_disposition_id = as.numeric(discharge_disposition_id)) %>%
rename(discharge_disposition = description)
## admission_source_id
admission_source_data <- id_mapping %>%
filter(row(id_mapping) >= 43) %>%
rename(admission_source_id = admission_type_id) %>%
mutate(admission_source_id = as.numeric(admission_source_id)) %>%
rename(admission_source = description)
cleaned_databetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race))
cleaned_databetic_data %>% names
cleaned_databetic_data %>% select(readmitted) %>% unique()
cleaned_databetic_data %>% select(diabetesMed) %>% unique()
runApp()
runApp()
unique(cleaned_databetic_data$admission_source)
list(unique(cleaned_databetic_data$admission_source))
runApp()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed)
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(x = number_diagonses)) +
geom_boxplot()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(x = number_diagnoses)) +
geom_boxplot()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = number_diagnoses)) +
geom_boxplot()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = number_diagnoses, fill = readmitted)) +
geom_boxplot()
cleaned_databetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission in greater than 30 days",
readmitted == "<30" ~ "Readmission in less than 30 days"))
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = number_diagnoses, fill = readmitted)) +
geom_boxplot()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = time_in_hospital, fill = readmitted)) +
geom_boxplot()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = time_in_hospital, fill = readmitted)) +
geom_jitter()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = time_in_hospital, fill = readmitted)) +
geom_swarm()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = time_in_hospital, x = num_procedures)) +
geom_swarm()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = time_in_hospital, x = num_procedures)) +
geom_point()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = time_in_hospital, x = num_procedures)) +
geom_point()
cleaned_databetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
ggplot(aes(y = number_emergency, x = num_procedures)) +
geom_point()
setwd("C:/Users/Matthew/Desktop/R Shiny/Practice/SelfPractice/Diabetes 130-US hospitals/RShinyApp")
shiny::runApp()
library(shiny)
library(shinyWidgets)
library(tidyverse)
diabetic_data <- read_csv("./diabetic_data.csv", na = "?")
id_mapping <- read_csv("./IDs_mapping.csv")
# admission_type_id
admission_type_data <- id_mapping %>%
filter(row(id_mapping) >= 1 & row(id_mapping) <= 8) %>%
mutate(admission_type_id = as.numeric(admission_type_id)) %>%
rename(admission_type = description)
## discharge_disposition_id,description
discharge_disposition_data <- id_mapping %>%
filter(row(id_mapping) >= 11 & row(id_mapping) <= 40) %>%
rename(discharge_disposition_id = admission_type_id) %>%
mutate(discharge_disposition_id = as.numeric(discharge_disposition_id)) %>%
rename(discharge_disposition = description)
## admission_source_id
admission_source_data <- id_mapping %>%
filter(row(id_mapping) >= 43) %>%
rename(admission_source_id = admission_type_id) %>%
mutate(admission_source_id = as.numeric(admission_source_id)) %>%
rename(admission_source = description)
cleaned_databetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission >30 days",
readmitted == "<30" ~ "Readmission <30 days"))
cleaned_databetic_data %>% count(gender)
runApp()
runApp()
cleaned_databetic_data
cleaned_databetic_data %>% names
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital)
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital) %>%
group_by(race, time_in_hospital) %>%
slice_max(5)
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital) %>%
group_by(race) %>%
slice_max(5)
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital) %>%
group_by(time_in_hospital) %>%
slice_max(5)
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital) %>%
group_by(time_in_hospital) %>%
slice_max(n = 5)
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital) %>%
group_by(time_in_hospital) %>%
slice_max(5, order_by = n)
?slice_max
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital) %>%
rename(freq = n)
slice_max(5, order_by = c(race, time_in_hospital))
slice_max(5, order_by = freq))
slice_max(5, order_by = freq)
slice_max(n = 5, order_by = freq)
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital) %>%
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel(h3("Diabetes in 130 US hospitals (1999-2008)")),
titlePanel(h5("Information on Data: https://www.kaggle.com/datasets/brandao/diabetes")),
tabsetPanel(
tabPanel("Demographics",
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
selectInput("selectDemoChart", label = "Select Chart Demographic",
choices = c("Race", "Gender", "Age")),
pickerInput("selectAdmissionType", label = "Select Admission Type",
choices = unique(cleaned_databetic_data$admission_type),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$admission_type)),
pickerInput("selectAdmissionSource", label = "Select Admission Source",
choices = unique(cleaned_databetic_data$admission_source),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$admission_source)),
pickerInput("selectDischargeDisposition", label = "Select Discharge Disposition",
choices = unique(cleaned_databetic_data$discharge_disposition),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$discharge_disposition))),
mainPanel(
plotOutput("demoChart")
)
)
),
tabPanel("Hospital Data",
sidebarLayout(position = "left",
sidebarPanel(
sliderInput("selectTimeInHospital", label = "Select Days in Hospital",
min = 1, max = 14, value = c(1, 14)),
selectInput("selectChartY", label = "Select Chart Axis",
choices = c("Race" = "race", "Gender" = "gender",
"Age" = "age", "Medical Specialty")),
pickerInput("selectReadmission", label = "Select Readmission Time",
choices = unique(cleaned_databetic_data$readmitted),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$readmitted)),
pickerInput("selectDiabetesMed", label = "Select Diabetes Medicaiton",
choices = unique(cleaned_databetic_data$diabetesMed),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$diabetesMed))),
mainPanel(
plotOutput("readmission"), plotOutput("diabetesMedication")
)
)
)
)
)
cleaned_databetic_data %>%
group_by(race) %>%
count(time_in_hospital)
cleaned_databetic_data  %>% names
cleaned_databetic_data %>%
group_by(race) %>%
count(number_diagnoses)
cleaned_databetic_data %>%
ggplot(aes(x = race, y = number_diagnoses)) +
geom_boxplot()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
count()
cleaned_databetic_data %>%
group_by(race, number_diagnoses) %>%
count()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses))
cleaned_databetic_data %>% filter(patient_nbr == 135) %>% view()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
ggplot(aes(x = race, y = number_diagnoses)) +
geom_boxplot()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
ggplot(aes(x = race, y = total_diagnoses)) +
geom_boxplot()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = race, y = avg_diagnoses)) +
geom_boxplot()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = race, y = avg_diagnoses)) +
geom_col()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses))
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
filter(race == "Caucasian")
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
filter(race == "Caucasian") %>%
mean(total_diagnoses)
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
filter(race == "Caucasian") %>%
mean(total_diagnoses, na.rm = T)
?mean
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
filter(race == "Caucasian") %>%
summarise(avg_diagnoses = mean(total_diagnoses))
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
filter(race == "Caucasian") %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses))
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = race, y = avg_diagnoses)) +
geom_col()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = race, y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = avg_diagnoses), vjust = -0.2)
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2)
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = race, y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2))
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel(h3("Diabetes in 130 US hospitals (1999-2008)")),
titlePanel(h5("Information on Data: https://www.kaggle.com/datasets/brandao/diabetes")),
tabsetPanel(
tabPanel("Patient Demographics",
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
selectInput("selectDemoChart", label = "Select Chart Demographic",
choices = c("Race", "Gender", "Age")),
pickerInput("selectAdmissionType", label = "Select Admission Type",
choices = unique(cleaned_databetic_data$admission_type),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$admission_type)),
pickerInput("selectAdmissionSource", label = "Select Admission Source",
choices = unique(cleaned_databetic_data$admission_source),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$admission_source)),
pickerInput("selectDischargeDisposition", label = "Select Discharge Disposition",
choices = unique(cleaned_databetic_data$discharge_disposition),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$discharge_disposition))),
mainPanel(
plotOutput("demoChart")
)
)
),
tabPanel("Patient Data",
sidebarLayout(position = "left",
sidebarPanel(
sliderInput("selectTimeInHospital", label = "Select Days in Hospital",
min = 1, max = 14, value = c(1, 14)),
selectInput("selectChartY", label = "Select Chart Axis",
choices = c("Race" = "race", "Gender" = "gender",
"Age" = "age", "Medical Specialty")),
pickerInput("selectReadmission", label = "Select Readmission Time",
choices = unique(cleaned_databetic_data$readmitted),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$readmitted)),
pickerInput("selectDiabetesMed", label = "Select Diabetes Medicaiton",
choices = unique(cleaned_databetic_data$diabetesMed),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_databetic_data$diabetesMed))),
mainPanel(
plotOutput("readmission"), plotOutput("diabetesMedication")
)
)
)
)
)
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = race, y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2))
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = fct_reorder(race, avg_diagnoses), y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2))
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = fct_reorder(race,  -avg_diagnoses), y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2))
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = fct_reorder(race,  -avg_diagnoses), y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2)) +
labs(x = "", y = "", title = "Average Diagnoses")
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = fct_reorder(race,  -avg_diagnoses), y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2)) +
labs(x = "", y = "", title = "Average Diagnoses") +
theme_classic()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = fct_reorder(race,  -avg_diagnoses), y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2)) +
labs(x = "", y = "", title = "Average Diagnoses") +
theme_classic()
cleaned_databetic_data %>%
group_by(race) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(race) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(x = fct_reorder(race,  -avg_diagnoses), y = avg_diagnoses)) +
geom_col() +
geom_text(aes(label = round(avg_diagnoses, 2), vjust = -0.2)) +
labs(x = "", y = "", title = "Average Diagnoses") +
theme_classic()
cleaned_databetic_data %>%
group_by(patient_nbr, race) %>%
summarise(total_diagnoses = sum(number_diagnoses))
cleaned_databetic_data %>%
group_by(race) %>%
summarise(total_diagnoses = sum(number_diagnoses))
runApp()
runApp()
runApp()
cleaned_databetic_data %>% names()
runApp()
?tableOutput
runApp()
runApp()
runApp()
runApp()
runApp()
cleaned_databetic_data %>%
group_by(patient_nbr) %>%
count()
cleaned_databetic_data %>%
distinct(patient_nbr)
cleaned_databetic_data %>%
distinct(patient_nbr) %>% summarise(`Total Patients` = count(patient_nbr))
cleaned_databetic_data %>%
distinct(patient_nbr) %>% summarise(`Total Patients` = nrow())
cleaned_databetic_data %>%
distinct(patient_nbr)
nrow(cleaned_databetic_data %>% distinct(patient_nbr))
nrow(cleaned_databetic_data %>% distinct(patient_nbr)) %>%
as.data.frame()
runApp()
nrow(cleaned_databetic_data %>% distinct(patient_nbr)) %>%
as.data.frame() %>%
rename(`Total Number of Patients` = .)
?rename
runApp()
nrow(cleaned_databetic_data %>% distinct(patient_nbr)) %>%
as.data.frame()
?as.data.frame
runApp()
demographic_diabetic_data() %>%
distinct(patient_nbr) %>% mutate(rows = nrow(demographic_diabetic_data() %>%
distinct(patient_nbr)))
cleaned_databetic_data %>%
distinct(patient_nbr) %>%
mutate(rows = cleaned_databetic_data %>%
distinct(patient_nbr))
cleaned_databetic_data %>%
distinct(patient_nbr) %>% mutate(rows = nrow(cleaned_databetic_data %>%
distinct(patient_nbr)))
runApp()
