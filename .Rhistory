runApp()
?tableOutput
runApp()
runApp()
runApp()
runApp()
runApp()
cleaned_databetic_data %>%
group_by(patient_nbr) %>%
count()
cleaned_databetic_data %>%
distinct(patient_nbr)
cleaned_databetic_data %>%
distinct(patient_nbr) %>% summarise(`Total Patients` = count(patient_nbr))
cleaned_databetic_data %>%
distinct(patient_nbr) %>% summarise(`Total Patients` = nrow())
cleaned_databetic_data %>%
distinct(patient_nbr)
nrow(cleaned_databetic_data %>% distinct(patient_nbr))
nrow(cleaned_databetic_data %>% distinct(patient_nbr)) %>%
as.data.frame()
runApp()
nrow(cleaned_databetic_data %>% distinct(patient_nbr)) %>%
as.data.frame() %>%
rename(`Total Number of Patients` = .)
?rename
runApp()
nrow(cleaned_databetic_data %>% distinct(patient_nbr)) %>%
as.data.frame()
?as.data.frame
runApp()
demographic_diabetic_data() %>%
distinct(patient_nbr) %>% mutate(rows = nrow(demographic_diabetic_data() %>%
distinct(patient_nbr)))
cleaned_databetic_data %>%
distinct(patient_nbr) %>%
mutate(rows = cleaned_databetic_data %>%
distinct(patient_nbr))
cleaned_databetic_data %>%
distinct(patient_nbr) %>% mutate(rows = nrow(cleaned_databetic_data %>%
distinct(patient_nbr)))
runApp()
setwd("C:/Users/Matthew/Desktop/R Shiny/Practice/SelfPractice/Diabetes 130-US hospitals/RShinyApp")
shiny::runApp()
runApp()
runApp()
runApp()
library(tidyverse)
diabetic_data <- read_csv("./diabetic_data.csv", na = "?")
id_mapping <- read_csv("./IDs_mapping.csv")
# admission_type_id
admission_type_data <- id_mapping %>%
filter(row(id_mapping) >= 1 & row(id_mapping) <= 8) %>%
mutate(admission_type_id = as.numeric(admission_type_id)) %>%
rename(admission_type = description)
## discharge_disposition_id,description
discharge_disposition_data <- id_mapping %>%
filter(row(id_mapping) >= 11 & row(id_mapping) <= 40) %>%
rename(discharge_disposition_id = admission_type_id) %>%
mutate(discharge_disposition_id = as.numeric(discharge_disposition_id)) %>%
rename(discharge_disposition = description)
## admission_source_id
admission_source_data <- id_mapping %>%
filter(row(id_mapping) >= 43) %>%
rename(admission_source_id = admission_type_id) %>%
mutate(admission_source_id = as.numeric(admission_source_id)) %>%
rename(admission_source = description)
cleaned_diabetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission >30 days",
readmitted == "<30" ~ "Readmission <30 days"))
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel(h3("Diabetes in 130 US hospitals (1999-2008)")),
tabsetPanel(
tabPanel("Patient Demographics",
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
tableOutput("exampleData"),
selectInput("selectDemoChart", label = "Select Chart Demographic",
choices = c("Race" = "race", "Gender" = "gender",
"Age" = "age")),
pickerInput("selectAdmissionType", label = "Select Admission Type",
choices = unique(cleaned_diabetic_data$admission_type),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_diabetic_data$admission_type)),
pickerInput("selectAdmissionSource", label = "Select Admission Source",
choices = unique(cleaned_diabetic_data$admission_source),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_diabetic_data$admission_source)),
pickerInput("selectDischargeDisposition", label = "Select Discharge Disposition",
choices = unique(cleaned_diabetic_data$discharge_disposition),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_diabetic_data$discharge_disposition))),
mainPanel(
plotOutput("demoChart"), plotOutput("encounters")
)
)
),
tabPanel("Patient Data",
sidebarLayout(position = "left",
sidebarPanel(
sliderInput("selectTimeInHospital", label = "Select Days in Hospital",
min = 1, max = 14, value = c(1, 14)),
selectInput("selectChartY", label = "Select Chart Axis",
choices = c("Race" = "race", "Gender" = "gender",
"Age" = "age", "Medical Specialty")),
pickerInput("selectReadmission", label = "Select Readmission Time",
choices = unique(cleaned_diabetic_data$readmitted),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_diabetic_data$readmitted)),
pickerInput("selectDiabetesMed", label = "Select Diabetes Medicaiton",
choices = unique(cleaned_diabetic_data$diabetesMed),
multiple = T, options = list(`actions-box` = TRUE),
selected = unique(cleaned_diabetic_data$diabetesMed))),
mainPanel(
plotOutput("readmission"), plotOutput("diagnoses")
)
)
)
)
)
ggplot(cleaned_diabetic_data %>%
select(race, patient_nbr) %>%
distinct() %>%
group_by(race) %>%
count() %>%
arrange(-n) %>%
rename(Frequency = n) %>%
mutate(race = ifelse(is.na(race), "Unknown", race)),
aes(y = Frequency, x = fct_reorder(as.factor(race), -Frequency)), color = "#1b94e4") +
geom_col(fill = "#1b94e4") +
theme_classic() +
labs(x = "", y = "", titles = "Patients By Race") +
geom_text(aes(label = Frequency), vjust = -0.2) +
theme(axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8))
runApp()
runApp()
cleaned_diabetic_data %>%
group_by(patient_nbr, medical_specialty) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(medical_specialty) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(y = fct_reorder(medical_specialty,  avg_diagnoses), x = avg_diagnoses)) +
geom_col(fill = "#1b94e4") +
geom_text(aes(label = round(avg_diagnoses, 2))) +
labs(x = "", y = "", title = "Average Diagnoses") +
theme_classic() +
theme(legend.position = "none") +
scale_color_distiller()
runApp()
runApp()
runApp()
runApp()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures, patient_nbr,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
mutate(medical_specialty = fct_lump(medical_specialty, 10)) %>%
filter(time_in_hospital >= input$selectTimeInHospital[1] &
time_in_hospital <= input$selectTimeInHospital[2] &
readmitted %in% input$selectReadmission &
diabetesMed %in% input$selectDiabetesMed
)%>%
group_by(patient_nbr, medical_specialty) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(medical_specialty) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(y = fct_reorder(medical_specialty,  avg_diagnoses), x = avg_diagnoses)) +
geom_col(fill = "#1b94e4") +
geom_text(aes(label = round(avg_diagnoses, 2))) +
labs(x = "", y = "", title = "Average Diagnoses") +
theme_classic() +
theme(legend.position = "none") +
scale_color_distiller()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, num_lab_procedures, num_procedures, patient_nbr,
number_emergency, readmitted, medical_specialty, number_diagnoses, admission_type,
discharge_disposition, admission_source, readmitted, diabetesMed) %>%
mutate(medical_specialty = fct_lump(medical_specialty, 10)) %>%
group_by(patient_nbr, medical_specialty) %>%
summarise(total_diagnoses = sum(number_diagnoses)) %>%
group_by(medical_specialty) %>%
summarise(avg_diagnoses = mean(total_diagnoses)) %>%
ggplot(aes(y = fct_reorder(medical_specialty,  avg_diagnoses), x = avg_diagnoses)) +
geom_col(fill = "#1b94e4") +
geom_text(aes(label = round(avg_diagnoses, 2))) +
labs(x = "", y = "", title = "Average Diagnoses") +
theme_classic() +
theme(legend.position = "none") +
scale_color_distiller()
runApp()
cleaned_diabetic_data %>%
group_by(patient_nbr) %>%
count() %>%
rename(num_encounters = n) %>%
inner_join(cleaned_diabetic_data %>%
select(patient_nbr, medical_speciality), by = c("patient_nbr")) %>%
ungroup() %>%
group_by(age) %>%
summarise(avg_encounters = mean(num_encounters)) %>%
distinct() %>%
ggplot(aes(x = as.factor(age, order = c("[0-10)", "[10-20)", "[20-30)", "[30-40)",
"[40-50)", "[50-60)","[60-70)",
"[70-80)", "[80-90)", "[90-100)"), y = avg_encounters))) +
geom_col(fill = "#1b94e4") +
geom_text(aes(label = round(avg_encounters, 2)), vjust = -0.2) +
theme_classic() +
labs(x = "", y = "", title = "Average Patient Encounters")
runApp()
?factor
runApp()
runApp()
runApp()
runApp()
cleaned_diabetic_data %>% names
runApp()
?renderDataTable
runApp()
runApp()
cleaned_diabetic_data %>%
group_by(patient_nbr) %>%
count() %>%
rename(num_encounters = n) %>%
inner_join(cleaned_diabetic_data %>%
select(patient_nbr, age), by = c("patient_nbr")) %>%
ungroup() %>%
group_by(age) %>%
summarise(avg_encounters = mean(num_encounters)) %>%
distinct() %>%
ggplot(aes(x = as.factor(age),
order = c("[0-10)", "[10-20)", "[20-30)", "[30-40)",
"[40-50)", "[50-60)","[60-70)",
"[70-80)", "[80-90)", "[90-100)"), y = avg_encounters, fill = avg_encounters)) +
geom_col(fill = "#1b94e4") +
geom_text(aes(label = round(avg_encounters, 2)), vjust = -0.2) +
theme_classic() +
labs(x = "", y = "", title = "Average Patient Encounters")
runApp()
?aes
cleaned_diabetic_data %>%
group_by(patient_nbr) %>%
count() %>%
rename(num_encounters = n) %>%
inner_join(cleaned_diabetic_data %>%
select(patient_nbr, age), by = c("patient_nbr")) %>%
ungroup() %>%
group_by(age) %>%
summarise(avg_encounters = mean(num_encounters)) %>%
distinct() %>%
ggplot(aes(x = as.factor(age),
order = c("[0-10)", "[10-20)", "[20-30)", "[30-40)",
"[40-50)", "[50-60)","[60-70)",
"[70-80)", "[80-90)", "[90-100)"), y = avg_encounters, fill = avg_encounters)) +
geom_col() +
geom_text(aes(label = round(avg_encounters, 2)), vjust = -0.2) +
theme_classic() +
labs(x = "", y = "", title = "Average Patient Encounters") +
theme(legend.position = "none")
cleaned_diabetic_data %>%
group_by(patient_nbr) %>%
count() %>%
rename(num_encounters = n) %>%
inner_join(cleaned_diabetic_data %>%
select(patient_nbr, age), by = c("patient_nbr")) %>%
ungroup() %>%
group_by(age) %>%
summarise(avg_encounters = mean(num_encounters)) %>%
distinct() %>%
ggplot(aes(x = fct_reorder(age), y = avg_encounters, fill = avg_encounters)) +
geom_col() +
geom_text(aes(label = round(avg_encounters, 2)), vjust = -0.2) +
theme_classic() +
labs(x = "", y = "", title = "Average Patient Encounters") +
theme(legend.position = "none")
?fct_reorder
cleaned_diabetic_data %>%
group_by(patient_nbr) %>%
count() %>%
rename(num_encounters = n) %>%
inner_join(cleaned_diabetic_data %>%
select(patient_nbr, age), by = c("patient_nbr")) %>%
ungroup() %>%
group_by(age) %>%
summarise(avg_encounters = mean(num_encounters)) %>%
distinct() %>%
ggplot(aes(x = fct_inorder(age), y = avg_encounters, fill = avg_encounters)) +
geom_col() +
geom_text(aes(label = round(avg_encounters, 2)), vjust = -0.2) +
theme_classic() +
labs(x = "", y = "", title = "Average Patient Encounters") +
theme(legend.position = "none")
runApp()
cleaned_diabetic_data %>%
group_by(age) %>%
count()
cleaned_diabetic_data %>%
group_by(age) %>%
count()
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(`Number of Patients` = n )
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(`Number of Patients` = n)
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename("Number of Patients" = n)
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n)
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(toupper())
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(x, toupper())
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(.data, toupper())
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(age, toupper())
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(x = age, toupper())
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(toupper(age))
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(toupper)
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(totitle)
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(tools::toTitleCase)
runApp()
library(shiny)
library(shinyWidgets)
library(tidyverse)
cleaned_diabetic_data <- read_csv("Data/cleaned_diabetic_data.csv")
readmission_model <- readRDS("Model/readmission_model.rds")
runApp()
runApp()
runApp()
?column
runApp()
runApp()
cleaned_diabetic_data %>% select(num_lab_procedures) %>% summary()
?numericInputIcon
runApp()
cleaned_diabetic_data %>% select(num_procedures) %>% summary()
cleaned_diabetic_data %>% select(num_outpatient) %>% summary()
cleaned_diabetic_data %>% select(number_outpatient) %>% summary()
cleaned_diabetic_data %>% select(number_inpatient) %>% summary()
cleaned_diabetic_data %>% select(number_emergency) %>% summary()
runApp()
runApp()
?valueboxoutput
runApp()
?data,frame
?data.frame
cleaned_diabetic_data %>% names
runApp()
setwd("C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp/Model")
# Not the best fit but will go ahead and put it in the app
# Can work on better performance later if needed
readmission_model <- readRDS("Model/readmission_model.rds")
# Not the best fit but will go ahead and put it in the app
# Can work on better performance later if needed
readmission_model <- readRDS("readmission_model.rds")
model_data <- cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor))
set.seed(42)
# Create training and testing data
data_split <- initial_split(model_data, prop = .75, strata = readmitted)
training_data <- training(data_split)
testing_data <- testing(data_split)
library(tidyverse)
library(tidymodels)
cleaned_diabetic_data <- read_csv("cleaned_diabetic_data.csv")
model_data <- cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor))
set.seed(42)
# Create training and testing data
data_split <- initial_split(model_data, prop = .75, strata = readmitted)
training_data <- training(data_split)
testing_data <- testing(data_split)
output_xgboost <- fit(xgboost_final_wf, training_data)
output_xgboost <- fit(readmission_model, training_data)
readmission_model
readmission_model$.workflow
output_xgboost <- fit(readmission_model$.workflow, training_data)
# Building Model for Shiny App
library(tidyverse)
library(tidymodels)
cleaned_diabetic_data <- read_csv("cleaned_diabetic_data.csv")
model_data <- cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor))
set.seed(42)
# Create training and testing data
data_split <- initial_split(model_data, prop = .75, strata = readmitted)
training_data <- training(data_split)
testing_data <- testing(data_split)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_dummy(all_nominal_predictors())
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
xgboost_param <- xgboost_tune %>%
select_best("roc_auc")
final_xgboost <- finalize_model(xgboost_mod, xgboost_param)
xgboost_final_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(final_xgboost)
xgboost_res <- last_fit(xgboost_final_wf, data_split)
xgboost_res %>% unnest(.predictions) %>%
conf_mat(truth = readmitted, estimate = .pred_class)
# Not the best fit but will go ahead and put it in the app
# Can work on better performance later if needed
output_xgboost <- fit(xgboost_final_wf, training_data)
saveRDS(output_xgboost, "readmission_model.rds")
testing_dat[:1,]
testing_data[:1,]
testing_data[1,]
predict(output_xgboost, new_data = testing_data[1,])
runApp('C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp')
library(shinydashboard)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
?renderValueBox()
runApp('C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp')
runApp('C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp')
predict(readmission_model, new_data=testing_data[1,])
readmission_model <- readRDS("Model/readmission_model.rds")
setwd("C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp")
readmission_model <- readRDS("Model/readmission_model.rds")
runApp()
View(readmission_model)
predict(readmission_model, new_data=training[1,])
predict(readmission_model, new_data=training_data[1,])
predict(readmission_model, new_data=training_data[1,]) %>% pull()
runApp()
predict(readmission_model, new_data=training_data[1,], type = "prob")
predict(readmission_model, new_data=training_data[1,], type = "prob")
runApp()
runApp()
library(xgboost)
runApp()
