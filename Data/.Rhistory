sample(training_data, 50)
mod <- glm(diabetesMed ~., data=training_data %>% slice(20), family="binomial")
mod <- glm(diabetesMed ~., data=training_data %>% slice(1:20), family="binomial")
mod <- glm(diabetesMed ~., data=as.data.frame(training_data) %>% slice(1:20), family="binomial")
mod <- glm(diabetesMed ~., data=training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 100), family="binomial")
mod <- glm(diabetesMed ~., data=training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500), family="binomial")
training_data %>% names
mod <- glm(diabetesMed ~., data=training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500), family="binomial")
training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500) %>% summary()
training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 1000) %>% summary()
training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 10000) %>% summary()
mod <- glm(diabetesMed ~., data=training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500 and row_number >= 70000), family="binomial")
mod <- glm(diabetesMed ~., data=training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500 & row_number >= 70000), family="binomial")
training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500 & row_number >= 70000) %>% summary()
mod <- glm(diabetesMed ~., data=training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500 | row_number >= 70000), family="binomial")
predict(mod, newdata=testing_data, type="response")
mod <- glm(diabetesMed ~., data=training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500 | row_number >= 70000) %>%
select(-row_number), family="binomial")
predict(mod, newdata=testing_data, type="response")
training_data %>%
mutate(row_number = row_number()) %>%
filter(row_number <= 500 | row_number >= 70000) %>% summary()
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
recipe(readmitted ~ ., data = training_data) %>%
step_naomit() %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal_predictors())
recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal_predictors())
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal_predictors())
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_dummy(all_nominal_predictors())
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_dummy(all_nominal_predictors()) %>%
step_downsample(readmission)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmission)
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
naniar::gg_miss_var(model_data)
?step_other
?step_mutate
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted) %>%
prep() %>%
bake(testing_data) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(testing_data) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 3)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 4)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(gender = fct_lump(gender, n = 3)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(gender = fct_lump(gender, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(gender = fct_lump(gender, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(gender = fct_lump(gender, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
?fct_lump
recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(gender = fct_lump_n(gender, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
model_data %>% naniar::gg_miss_var()
model_data <- cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor),
race = ifelse(is.na(race), "Unknown", race))
set.seed(42)
# Create training and testing data
data_split <- initial_split(model_data, prop = .75, strata = readmitted)
training_data <- training(data_split)
testing_data <- testing(data_split)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_mutate(race = fct_lump(race, n = 2)) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
naniar::gg_miss_var()
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_other(admission_type, discharge_disposition, admission_source, threshold = 150) %>%
step_other(medical_specialty, threshold = 50) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 3)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
diabetic_data <- read_csv("diabetic_data.csv", na = "?")
setwd("C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp/Data")
diabetic_data <- read_csv("diabetic_data.csv", na = "?")
id_mapping <- read_csv("IDs_mapping.csv")
# admission_type_id
admission_type_data <- id_mapping %>%
filter(row(id_mapping) >= 1 & row(id_mapping) <= 8) %>%
mutate(admission_type_id = as.numeric(admission_type_id)) %>%
rename(admission_type = description)
## discharge_disposition_id,description
discharge_disposition_data <- id_mapping %>%
filter(row(id_mapping) >= 11 & row(id_mapping) <= 40) %>%
rename(discharge_disposition_id = admission_type_id) %>%
mutate(discharge_disposition_id = as.numeric(discharge_disposition_id)) %>%
rename(discharge_disposition = description)
## admission_source_id
admission_source_data <- id_mapping %>%
filter(row(id_mapping) >= 43) %>%
rename(admission_source_id = admission_type_id) %>%
mutate(admission_source_id = as.numeric(admission_source_id)) %>%
rename(admission_source = description)
cleaned_diabetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission >30 days",
readmitted == "<30" ~ "Readmission <30 days")) %>%
race = ifelse(is.na(race), "Unknown", race) %>%
write_csv("cleaned_diabetic_data.csv")
cleaned_diabetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission >30 days",
readmitted == "<30" ~ "Readmission <30 days"),
race = ifelse(is.na(race), "Unknown", race)) %>%
write_csv("cleaned_diabetic_data.csv")
cleaned_diabetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission >30 days",
readmitted == "<30" ~ "Readmission <30 days"),
race = ifelse(is.na(race), "Unknown", race)) %>%
write_csv("cleaned_diabetic_data.csv")
diabetic_data <- read_csv("diabetic_data.csv", na = "?")
id_mapping <- read_csv("IDs_mapping.csv")
# admission_type_id
admission_type_data <- id_mapping %>%
filter(row(id_mapping) >= 1 & row(id_mapping) <= 8) %>%
mutate(admission_type_id = as.numeric(admission_type_id)) %>%
rename(admission_type = description)
## discharge_disposition_id,description
discharge_disposition_data <- id_mapping %>%
filter(row(id_mapping) >= 11 & row(id_mapping) <= 40) %>%
rename(discharge_disposition_id = admission_type_id) %>%
mutate(discharge_disposition_id = as.numeric(discharge_disposition_id)) %>%
rename(discharge_disposition = description)
## admission_source_id
admission_source_data <- id_mapping %>%
filter(row(id_mapping) >= 43) %>%
rename(admission_source_id = admission_type_id) %>%
mutate(admission_source_id = as.numeric(admission_source_id)) %>%
rename(admission_source = description)
cleaned_diabetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission >30 days",
readmitted == "<30" ~ "Readmission <30 days"),
race = ifelse(is.na(race), "Unknown", race)) %>%
write_csv("cleaned_diabetic_data.csv")
## discharge_disposition_id,description
discharge_disposition_data <- id_mapping %>%
filter(row(id_mapping) >= 11 & row(id_mapping) <= 40) %>%
rename(discharge_disposition_id = admission_type_id) %>%
mutate(discharge_disposition_id = as.numeric(discharge_disposition_id)) %>%
rename(discharge_disposition = description)
diabetic_data <- read_csv("diabetic_data.csv", na = "?")
id_mapping <- read_csv("IDs_mapping.csv")
# admission_type_id
admission_type_data <- id_mapping %>%
filter(row(id_mapping) >= 1 & row(id_mapping) <= 8) %>%
mutate(admission_type_id = as.numeric(admission_type_id)) %>%
rename(admission_type = description)
library(tidyverse)
diabetic_data <- read_csv("diabetic_data.csv", na = "?")
id_mapping <- read_csv("IDs_mapping.csv")
# admission_type_id
admission_type_data <- id_mapping %>%
filter(row(id_mapping) >= 1 & row(id_mapping) <= 8) %>%
mutate(admission_type_id = as.numeric(admission_type_id)) %>%
rename(admission_type = description)
## discharge_disposition_id,description
discharge_disposition_data <- id_mapping %>%
filter(row(id_mapping) >= 11 & row(id_mapping) <= 40) %>%
rename(discharge_disposition_id = admission_type_id) %>%
mutate(discharge_disposition_id = as.numeric(discharge_disposition_id)) %>%
rename(discharge_disposition = description)
## admission_source_id
admission_source_data <- id_mapping %>%
filter(row(id_mapping) >= 43) %>%
rename(admission_source_id = admission_type_id) %>%
mutate(admission_source_id = as.numeric(admission_source_id)) %>%
rename(admission_source = description)
cleaned_diabetic_data <- diabetic_data %>%
left_join(admission_type_data, by = c("admission_type_id")) %>%
left_join(discharge_disposition_data, by = c("discharge_disposition_id")) %>%
left_join(admission_source_data, by = c("admission_source_id")) %>%
select(-c(admission_type_id, discharge_disposition_id, admission_source_id)) %>%
mutate(race = ifelse(race == "AfricanAmerican", "African American", race),
medical_specialty = ifelse(is.na(medical_specialty), "Unknown", medical_specialty),
readmitted = case_when(
readmitted == "NO" ~ "No Readmission",
readmitted == ">30" ~ "Readmission >30 days",
readmitted == "<30" ~ "Readmission <30 days"),
race = ifelse(is.na(race), "Unknown", race)) %>%
write_csv("cleaned_diabetic_data.csv")
