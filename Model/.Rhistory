rename_with(toupper)
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(totitle)
cleaned_diabetic_data %>%
group_by(age) %>%
count() %>%
rename(Patients = n) %>%
rename_with(tools::toTitleCase)
runApp()
setwd("C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp/Model")
# Building Model for Shiny App
library(tidyverse)
library(tidymodels)
diabetic_data <- read_csv("C:\Users\Matthew\Desktop\R Shiny\Practice\SelfPractice\Diabetes 130-US hospitals\RShinyApp\Data", na = "?")
diabetic_data <- read_csv("C:\Users\Matthew\Desktop\R Shiny\Apps\Repo\Diabetes 130-US hospitals\RShinyApp\Data\cleaned_diabetic_data.csv")
diabetic_data <- read_csv("C://Users//Matthew//Desktop//R Shiny//Apps//Repo//Diabetes 130-US hospitals//RShinyApp//Data//cleaned_diabetic_data.csv")
cleaned_diabetic_data <- read_csv("C://Users//Matthew//Desktop//R Shiny//Apps//Repo//Diabetes 130-US hospitals//RShinyApp//Data//cleaned_diabetic_data.csv")
head(cleaned_diabetic_data)
cleaned_diabetic_data %>% names
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, diag_1)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:metformin-pioglitazone)
cleaned_diabetic_data %>%
select(max_glu_serum:metformin-pioglitazone)
cleaned_diabetic_data %>% names
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:examide)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:metformin-pioglitazone)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>% view()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>% summary()
?across
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>%
mutate(across(max_glu_serum:`metformin-pioglitazone`, factor()))
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>%
mutate(across(max_glu_serum:`metformin-pioglitazone`), factor)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>%
mutate(across(max_glu_serum:`metformin-pioglitazone`),~ factor)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>%
mutate(across(where(is.character)), factor)
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>%
mutate(across(where(is.character), factor))
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum:`metformin-pioglitazone`) %>%
mutate(across(where(is.character), factor)) %>%
summary()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, diabetesMed) %>%
mutate(across(where(is.character), factor)) %>%
summary()
cleaned_diabetic_data %>% names()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, readmitted) %>%
mutate(across(where(is.character), factor)) %>%
summary()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, readmitted) %>%
mutate(across(where(is.character), factor)) %>%
view()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor)) %>%
view()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor)) %>%
view()
cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor)) %>%
summary()
model_data <- cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor))
# Create training and testing data
data_split <- initial_split(model_data, prop = .75, strata = readmitted)
set.seed(42)
# Create training and testing data
data_split <- initial_split(model_data, prop = .75, strata = readmitted)
training_data <- training(data_split)
testing_data <- testing(data_split)
?step_corr
library(themis)
?step_downsample
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted) %>%
prep()
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted) %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted) %>%
prep() %>%
bake(NULL) %>% summary()
recipe(readmitted ~ ., data = training_data) %>%
themis::step_downsample(readmitted) %>%
prep() %>%
bake(NULL) %>% summary()
recipe(readmitted ~ ., data = training_data) %>%
themis::step_downsample(readmitted, diabetesMed) %>%
prep() %>%
bake(NULL) %>% summary()
recipe(readmitted ~ ., data = training_data) %>%
themis::step_downsample(c(readmitted, diabetesMed)) %>%
prep() %>%
bake(NULL) %>% summary()
recipe(readmitted ~ ., data = training_data) %>%
themis::step_bsmote(readmitted) %>%
prep() %>%
bake(NULL) %>% summary()
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote(readmitted) %>%
prep() %>%
bake(NULL) %>% summary()
?step_bsmote
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
prep() %>%
bake(NULL) %>% summary()
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted")
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
prep()
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted")
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
step_dummy(all_nominal_predictors())
recipe(readmitted ~ ., data = training_data) %>%
themis::step_smote("readmitted") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
step_naomit()
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
step_naomit() %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
step_naomit(all_predictors()) %>%
prep() %>%
bake(NULL)
recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
step_naomit(all_predictors()) %>%
prep() %>%
bake(NULL) %>%
summary()
recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors())
recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL) %>%
summary()
recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
prep() %>%
bake(NULL)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_dummy(all_nominal_predictors())
xgboost_grid = grid_regular(mtry(), trees(), tree_depth(), min_n(), learn_rate(),
levels = 5)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(mtry = tune(), trees = tune(), tree_depth = tune(),
min_n = tune(), learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid = grid_regular(mtry(), trees(), tree_depth(), min_n(), learn_rate(),
levels = 5)
?finalize
?grid_regular
xgboost_grid = grid_regular(mtry(),
levels = 5)
xgboost_grid = grid_regular(trees(),
levels = 5)
extract_parameter_set_dials(xgboost_mod)
xgboost_mod
xgboost_grid = grid_regular(trees(), tree_depth()
levels = 5)
xgboost_grid = grid_regular(trees(), tree_depth(),
levels = 5)
xgboost_grid = grid_regular(trees(), tree_depth(), min_n(),
levels = 5)
xgboost_grid = grid_regular(trees(), tree_depth(), min_n(), learn_rate(),
levels = 5)
xgboost_grid
xgboost_grid = grid_regular(trees(), tree_depth(), min_n(), learn_rate(),
levels = 3)
xgboost_grid
xgboost_grid = grid_random(trees(), tree_depth(), min_n(), learn_rate(),
levels = 3)
xgboost_grid
xgboost_grid = grid_random(trees(), tree_depth(), min_n(), learn_rate(),
size = 3)
xgboost_grid
xgboost_grid = grid_random(trees(), tree_depth(), min_n(), learn_rate(),
size = 30)
xgboost_grid
xgboost_grid = grid_random(mtry(), trees(), tree_depth(), min_n(), learn_rate(),
size = 30)
xgboost_mod %>% parameters()
xgboost_grid = grid_random(mtry() %>% finalize(), trees(), tree_depth(), min_n(), learn_rate(),
size = 30)
xgboost_grid = grid_random(mtry() %>% finalize(training_data), trees(), tree_depth(), min_n(), learn_rate(),
size = 30)
xgboost_grid = grid_random(mtry() %>%
finalize(training_data),
trees(), tree_depth(), min_n(), learn_rate(),
size = 30)
xgboost_grid
xgboost_grid %>% view()
xgboost_grid = grid_random(mtry() %>%
finalize(training_data),
trees(), tree_depth(), min_n(), learn_rate(),
size = 50)
?grid_random
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_wf
folds
# Create cross validation object
folds <- vfold_cv(training_data, v = 10)
folds
?tune_Grid
?tune_grid
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_naomit(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 10)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(mtry = tune(), trees = tune(), tree_depth = tune(),
min_n = tune(), learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid = grid_random(mtry() %>%
finalize(training_data),
trees(), tree_depth(), min_n(), learn_rate(),
size = 50)
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 10)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(mtry = tune(), trees = tune(), tree_depth = tune(),
min_n = tune(), learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid = grid_random(mtry() %>%
finalize(training_data),
trees(), tree_depth(), min_n(), learn_rate(),
size = 50)
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
?step_novel
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_novel(all_predictors(), -all_numeric()) %>%
step_dummy(all_nominal_predictors()) %>%
themis::step_downsample(readmitted)
# Create cross validation object
folds <- vfold_cv(training_data, v = 10)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(mtry = tune(), trees = tune(), tree_depth = tune(),
min_n = tune(), learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
# Create cross validation object
folds <- vfold_cv(training_data, v = 5)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(mtry = tune(), trees = tune(), tree_depth = tune(),
min_n = tune(), learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid = grid_random(mtry() %>%
finalize(training_data),
trees(), tree_depth(), min_n(), learn_rate(),
size = 25)
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
collect_metrics(xgboost_tune)
collect_metrics(xgboost_tune) %>%
select_best()
collect_metrics(xgboost_tune) %>%
select_best(roc_auc)
source("C:/Users/Matthew/Desktop/R Shiny/Apps/Repo/Diabetes 130-US hospitals/RShinyApp/Model/ModelScript.R", echo=TRUE)
collect_metrics(xgboost_tune)
collect_metrics(xgboost_tune) %>% view()
# Create model object and tuning parameters
mlp_mod <- mlp(hidden_units = tune() , penalty = tune()) %>%
set_engine("nnet") %>%
set_mode("classification")
mlp_grid <- grid_random(hidden_units(), penalty(),
size = 25)
mlp_grid
mlp_grid <- grid_regular(hidden_units(), penalty(),
size = 3)
mlp_grid <- grid_regular(hidden_units(), penalty(),
levels = 3)
mlp_grid
mlp_grid <- grid_regular(hidden_units(), penalty(),
levels = 4)
mlp_grid
# Create workflow and apply cross validation
mlp_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(mlp_mod)
mlp_tune <- mlp_wf %>%
tune_grid(
resamples = folds,
grid = mlp_grid
)
collect_metrics(mlp_tune) %>% view()
collect_metrics(xgboost_tune) %>%
show_best("accuracy")
collect_metrics(xgboost_tune)
collect_metrics(xgboost_tune) %>%
show_best("accuracy")
xgboost_tune %>%
show_best("accuracy")
xgboost_tune %>%
show_best("roc_auc")
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_novel(all_predictors(), -all_numeric()) %>%
step_dummy(all_nominal_predictors())
# Create cross validation object
folds <- vfold_cv(training_data, v = 5)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(mtry = tune(), trees = tune(), tree_depth = tune(),
min_n = tune(), learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 25)
xgboost_grid
xgboost_grid %>% view()
xgboost_grid <- grid_regular(trees(), min_n(), learn_rate(),
levels = 3)
xgboost_grid %>% view()
xgboost_grid <- grid_regular(trees(), min_n(), learn_rate(),
levels = 4)
xgboost_grid %>% view()
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 25)
xgboost_grid %>% view()
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 30)
xgboost_grid %>% view()
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 30)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
library(doParallel)
cl <- makePSOCKcluster(parallel::detectCores(logical = FALSE))
cl
registerDoParallel(cl)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
cleaned_diabetic_data <- read_csv("C://Users//Matthew//Desktop//R Shiny//Apps//Repo//Diabetes 130-US hospitals//RShinyApp//Data//cleaned_diabetic_data.csv")
model_data <- cleaned_diabetic_data %>%
select(race, gender, age, time_in_hospital, max_glu_serum, A1Cresult,
diabetesMed, medical_specialty, num_lab_procedures,
number_outpatient, number_emergency, number_inpatient, admission_type,
discharge_disposition, admission_source, change, readmitted) %>%
mutate(across(where(is.character), factor))
set.seed(42)
# Create training and testing data
data_split <- initial_split(model_data, prop = .75, strata = readmitted)
training_data <- training(data_split)
testing_data <- testing(data_split)
model_recipe <- recipe(readmitted ~ ., data = training_data) %>%
step_novel(all_predictors(), -all_numeric()) %>%
step_dummy(all_nominal_predictors())
# Create cross validation object
folds <- vfold_cv(training_data, v = 5)
# Create model object and tuning parameters
xgboost_mod <- boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
xgboost_grid <- grid_random(trees(), min_n(), learn_rate(),
size = 10)
xgboost_grid
# Create workflow and apply cross validation
xgboost_wf <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(xgboost_mod)
xgboost_tune <- xgboost_wf %>%
tune_grid(
resamples = folds,
grid = xgboost_grid
)
